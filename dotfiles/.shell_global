stty -ixon

if [ "$(uname)" != "Darwin" ]; then
    eval $(dircolors ~/.ls_colors)
fi

# =============================================================================
# locale
# =============================================================================

export LANG="en_US.UTF-8"
export LANGUAGE="en_US"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL=


# =============================================================================
# file navigation
# =============================================================================

if [ -x /usr/bin/dircolors ]; then
    alias dir="dir --color=auto"
    alias egrep="egrep --color=auto"
    alias fgrep="fgrep --color=auto"
    alias grep="grep --color=auto"
    alias ls="ls --color=auto"
    alias vdir="vdir --color=auto"
fi

alias cpr="cp -r"
alias l="ls -CF"
alias la="ls -A"
alias ll="ls -alFh"
alias rmr="rm -rfv"

cl () {  # cd && l
    [ -d "$1" ] && cd "$1" && l
}

cll () {  # cd && ll
    [ -d "$1" ] && cd "$1" && ll
}

mkcd () {  # mkdir && cd
    mkdir -p "$1" && cd "$1"
}

# =============================================================================
# git
# =============================================================================

alias gita="git add"
alias gitc="git commit -a -m"
alias gitca="git commit --amend"
alias gitd="git diff"
alias gitl="git log --graph --decorate --oneline"
# alias gitl="git log --pretty=format:'%C(yellow)%h%Creset %C(bold)%s%Creset %C(blue)<%an>%Creset %Cred%D %Creset%Cgreen(%cr)%Creset' --graph"
alias gitp="git pull"
alias gitP="git push && git push origin --tags"
alias gits="git status"

gitpsub () {
  for DIR in */; do
    echo
    echo "=============================="
    echo
    if [ -d "$DIR/.git" ]; then
      echo "Pulling latest changes in $DIR..."
      (
        cd "$DIR" || exit 1
        git pull
      )
    else
      echo "Skipping $DIR (not a git repository)"
    fi
  done
}

# =============================================================================
# python
# =============================================================================

alias python3="python3.11"
alias python="python3.11"
alias py="python3.11"
alias pip="python3.11 -m pip"
alias py10="python3.10"
alias pip10="python3.10 -m pip"
alias py11="python3.11"
alias pip11="python3.11 -m pip"
alias py12="python3.12"
alias pip12="python3.12 -m pip"

make_venv () {
    local _VENV=${VIRTUAL_ENV:-"$(pwd)/venv"}
    if [ -d "$_VENV" ]; then
        echo "Virtual env already exists: $_VENV"
    else
        local _PYTHON_VERSION=${1:-3.11}
        echo "Creating virtual env at: $_VENV"
        echo "Python version: $_PYTHON_VERSION"
        virtualenv "$_VENV" -p "python$_PYTHON_VERSION"
    fi
    patch_virtualenv
    _pip="$_VENV/bin/pip"
    . "$_VENV/bin/activate"
    $_pip install -U pip
    [ -f "requirements.txt" ] && $_pip install -U -r requirements.txt
    [ -f "requirements.dev.txt" ] && $_pip install -U -r requirements.dev.txt
    [ -f "requirements-dev.txt" ] && $_pip install -U -r requirements-dev.txt
    echo
    echo Python aliases status
    echo ---------------------
    whichp
}

patch_virtualenv () {
    local _VENV=${VIRTUAL_ENV:-"$(pwd)/venv"}
    local _ACTIVATE="$_VENV/bin/activate"
    local _PYTHON="$_VENV/bin/python"
    echo "Patching $_ACTIVATE"
    echo "[ -f ~/.shell_prompt ] && . ~/.shell_prompt" >> "$_ACTIVATE"
    echo "alias python=\"$_PYTHON\"" >> "$_ACTIVATE"
    echo "alias py=\"$_PYTHON\"" >> "$_ACTIVATE"
    echo "alias pip=\"$_PYTHON -m pip\"" >> "$_ACTIVATE"
}

whichp () {
    echo "python     ┬ $(which python)"
    echo "py         | $(which py)"
    echo "pip        ┴ $(which pip)"
    echo "python3.10 ┬ $(which python3.10)"
    echo "py10       | $(which py10)"
    echo "pip10      ┴ $(which pip10)"
    echo "python3.11 ┬ $(which python3.11)"
    echo "py11       | $(which py11)"
    echo "pip11      ┴ $(which pip11)"
    echo "python3.12 ┬ $(which python3.12)"
    echo "py12       | $(which py12)"
    echo "pip12      ┴ $(which pip12)"
}


# =============================================================================
# other
# =============================================================================

alias C="clear && cd ~"
alias c="clear"
alias ping8="ping 8.8.8.8"
alias tree="tree -a"
alias ux="chmod u+x"

# ytdlmp3 () {
#     yt-dlp --ignore-errors --format "(bestaudio[acodec^=opus]/bestaudio)/best" \
#         --extract-audio --audio-format mp3 --audio-quality 0 \
#         -o "%(playlist_index)s - %(title)s.%(ext)s" "$*"
# }
ytdlmp3() {
    if ! command -v yt-dlp >/dev/null 2>&1; then
        echo "Error: 'yt-dlp' is not installed. Please install it first." >&2
        return 1
    fi

    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: download_audio YT_URL [OUTPUT_DIR]" >&2
        return 1
    fi

    if [ "$#" -eq 2 ]; then
        OUTPUT_DIR="$2"
        if [ ! -d "$OUTPUT_DIR" ]; then
            echo "Error: '$OUTPUT_DIR' is not a valid directory" >&2
            return 1
        fi
    else
        OUTPUT_DIR="."
    fi

    YT_URL="$1"
    if yt-dlp --flat-playlist "$YT_URL" >/dev/null 2>&1; then
        echo "Downloading playlist..."
        yt-dlp -x --audio-format mp3 --embed-metadata \
            -o "$OUTPUT_DIR/%(playlist_index)s %(title)s.%(ext)s" \
            "$YT_URL"
    else
        echo "Downloading single video..."
        yt-dlp -x --audio-format mp3 --embed-metadata \
            -o "$OUTPUT_DIR/%(title)s.%(ext)s" \
            "$YT_URL"
    fi

    echo "Download complete!"
}


man () {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

# =============================================================================
# specialized file operations
# =============================================================================

compress() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: compress INPUT_FILE_OR_DIR [OUTPUT_FILE_OR_DIR]" >&2
        return 1
    fi

    INPUT="$1"
    if [ ! -e "$INPUT" ]; then
        echo "Error: '$INPUT' does not exist" >&2
        return 1
    fi
    BASE_NAME=$(basename "$INPUT")

    if [ "$#" -eq 1 ]; then
        OUTPUT="./${BASE_NAME}.zip"
    else
        OUTPUT="$2"
        if [ -d "$OUTPUT" ]; then
            OUTPUT="$OUTPUT/${BASE_NAME}.zip"
        fi
    fi

    if echo "$OUTPUT" | grep -qE '\.zip$'; then
        if command -v zip >/dev/null 2>&1; then
            zip -vr "$OUTPUT" "$INPUT"
        else
            echo "Error: 'zip' is not installed, cannot create ZIP archive" >&2
            return 1
        fi
    elif echo "$OUTPUT" | grep -qE '\.tar\.gz$'; then
        if command -v tar >/dev/null 2>&1; then
            tar -cvzf "$OUTPUT" "$INPUT"
        else
            echo "Error: 'tar' is not installed, cannot create TAR.GZ archive" >&2
            return 1
        fi
    else # Default to ZIP if no valid extension is provided
        OUTPUT="${OUTPUT}.zip"
        if command -v zip >/dev/null 2>&1; then
            zip -vr "$OUTPUT" "$INPUT"
        else
            echo "Error: 'zip' is not installed, cannot create ZIP archive" >&2
            return 1
        fi
    fi

    echo "Created archive: $OUTPUT"
}

decompress() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: decompress ARCHIVE [OUTPUT_DIR]" >&2
        return 1
    fi

    ARCHIVE="$1"
    if [ ! -f "$ARCHIVE" ]; then
        echo "Error: '$ARCHIVE' does not exist or is not a file" >&2
        return 1
    fi

    if [ "$#" -eq 2 ]; then
        OUTPUT_DIR="$2"
        if [ ! -d "$OUTPUT_DIR" ]; then
            echo "Error: '$OUTPUT_DIR' is not a directory" >&2
            return 1
        fi
    else
        OUTPUT_DIR="."
    fi

    if echo "$ARCHIVE" | grep -qE '\.zip$'; then
        if command -v unzip >/dev/null 2>&1; then
            unzip -v "$ARCHIVE" -d "$OUTPUT_DIR"
        else
            echo "Error: 'unzip' is not installed, cannot extract ZIP archive" >&2
            return 1
        fi
    elif echo "$ARCHIVE" | grep -qE '\.tar\.gz$'; then
        if command -v tar >/dev/null 2>&1; then
            tar -xvzf "$ARCHIVE" -C "$OUTPUT_DIR"
        else
            echo "Error: 'tar' is not installed, cannot extract TAR.GZ archive" >&2
            return 1
        fi
    else
        echo "Error: Unsupported archive format. Supported formats: .zip, .tar.gz" >&2
        return 1
    fi

    echo "Extracted '$ARCHIVE' to '$OUTPUT_DIR'"
}


# removes common trash files
rmtmp() {
    EXTENSIONS="*.*.gnuplot *.*.table *.aux *.bbl *.blg *.class *.fdb_latexmk *.fls *.idx *.ilg *.ind *.java~ *.log *.nav *.o *.out *.snm *.synctex.gz *.synctex(busy) *.toc *.xdv"
    if [ "$(uname)" != "Darwin" ]; then
        EXTENSIONS="$EXTENSIONS *.DS_Store .Trashes ._*"
    fi
    # shellcheck disable=SC2116,SC2086
    for EXT in $(echo $EXTENSIONS); do  # now that's weird
        find . -type f -name "$EXT" \
            -not -path "./.git/**" -not -path "**/.git/**" \
            -print -delete
    done
}

# =============================================================================
# tmux
# =============================================================================

alias ta="tmux attach || tmux"
alias tk="tmux kill-session -t"
alias tl="tmux list-session"
